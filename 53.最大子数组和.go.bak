/*
 * @lc app=leetcode.cn id=53 lang=golang
 *
 * [53] 最大子数组和
 *
 * https://leetcode.cn/problems/maximum-subarray/description/
 *
 * algorithms
 * Medium (54.76%)
 * Likes:    5166
 * Dislikes: 0
 * Total Accepted:    1.1M
 * Total Submissions: 2.1M
 * Testcase Example:  '[-2,1,-3,4,-1,2,1,-5,4]'
 *
 * 给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
 *
 * 子数组 是数组中的一个连续部分。
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
 * 输出：6
 * 解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。
 *
 *
 * 示例 2：
 *
 *
 * 输入：nums = [1]
 * 输出：1
 *
 *
 * 示例 3：
 *
 *
 * 输入：nums = [5,4,-1,7,8]
 * 输出：23
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= nums.length <= 10^5
 * -10^4 <= nums[i] <= 10^4
 *
 *
 *
 *
 * 进阶：如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的 分治法 求解。
 *
 */
package leetcode

// @lc code=start
func maxSubArray(nums []int) int {
	// 1.确定状态 f[i][j] 代表i到j的子数组的和
	// 2.转移方程 f[i][j] = j-i==1? nums[i]+nums[j] : f[i+1]f[j-1]+nums[i]+nums[j]
	// 3.边界条件 j-i>0 j+subLen<=length 0<=i<nums.length 0<=j<nums.length
	// 4.计算顺序 子数组长度从2到length
	f := make([][]int32, len(nums))
	for i := range f {
		f[i] = make([]int32, len(nums))
	}

	max := int32(-10001)

	for subLen := 1; subLen <= len(nums); subLen++ {
		for start := 0; start+subLen <= len(nums); start++ {
			end := start + subLen - 1
			if subLen == 1 {
				f[start][end] = int32(nums[start])
			} else if subLen == 2 {
				f[start][end] = int32(nums[start]) + int32(nums[end])
			} else {
				f[start][end] = f[start+1][end-1] + int32(nums[start]) + int32(nums[end])
			}
			if f[start][end] > max {
				max = f[start][end]
			}
		}
	}
	return int(max)
}

// @lc code=end
